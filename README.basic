Revisions
3/5/2014 TIme to set up commands
We can preload some basics and allow libs to extend them.

basic commands
!help   - show commands
!list   - tree view of objects 
!jlist  - json view
!read <filename>  read config from a file
!write <filename> write config to a file
!home take the tree back to base.



3/4/2014
!idea allow tiered list of commands

  got the socket lib set up and Socket.o removed from t2 and t2_main.
  this is really simple to work..

       ./t2 name fooserv@tcps?port=5566 fooserv!serv

  next need to get the ! commands working.

  telnet 127.0.0.1 5566
  fooserv=> gpio_1@gpios?pin=1&dir=output
  fooserv=> gpio_1?value=1
  fooserv=> gpio_1?value
      output {"fooserv":{"gpio_1":{"value":"1"}}}

3/3/2014
  would like to add the socket stuff as a library

  perhaps we should now have a master Library of things
  back to the old isa concept.

  gpio_1@gpios?pin=1&dir=output
  ^      ^    ^
  |      |    + -  attributes for this instance
  |      +-------  get the gpios shared lib
  +--------------  my name

  foolnk@tcps?addr=1.2.3.4&port=2334   foolnk!link
  ^      ^    ^
  |      |    + -  attributes for this instance
  |      +-------  get the link shared lib
  +--------------  my name

  foosrv@tcps?addr=1.2.3.4&port=2334 foosrv!serv
  ^      ^    ^
  |      |    + -  attributes for this instance
  |      +-------  get the serv shared lib
  +--------------  my name

   a - Master Lib Map for objects
   b - Create copy using base atributes and overlay attributes
   c - Create Action Link to base object Actions
  

3/2/2014
more on module loading
see below


 back the socket/port concept


./t2 mystuff@2345 starts/connects with  the mystuff object at 2345
 any object with @after the name will run as a socket server


=======
2/27/2014
==========
1/commands not yet in place
  !list
  !scan
  !clear
  !?
  !load  Load a moduke 


  can be cascaded on to a uid
  for example
  "a/whole/bunch/of/stuff//list"

2/ unique uid
  give each object a unique global uid
  allow direct access by id

    stuff!1234
    is equivalent to
    "stuff/a/whole/bunch/of/things"


3/ systems

   A system such as gpios / pwms will connect with the main server ans reister all 
   the associated lower level components
   the set/get/list/cfg actions will also be put in to the main server 
   via a shared library.


==============

1/ allow a cascaded message with attrd 
    object << "/some?dir=our&name=foo/funny/string/"
    done 1/20/2014

add back the socket/port concept
in progres

./t2 mystuff@2345 starts/connects with  the mystuff object at 2345
./t2 mystuff@somewhere:2345 creates a link to the mystuff object on somewhere:2345
./t2 mystuff "some string"  performs the string pinput to mystuff





1/19/2014
got the string splitter working
gets name,attrs and remains from an input string.

 name[some] attrs [?dir=our&name=foo] remains [/funny/string/] src [/some?dir=our&name=foo/funny/string/]


1/18/2014
Start T2 and simplyfy the whole thing

object << "a/whole/bunch/of/stuff"

cout << object
scan << "gpios"




Initial commants 1/28/2014
  Phil Wilshire

This is an attempt to create a method to find/describe/control things 
in an interconnected world.

A simple example is a set of gpios on a small system.

Take a url style of format

/my_new_pi/gpio_1/?value=1

This will set the value of gpio_1 on my_new_pi to 1 !

It would be nice to be able to set this up very simply.

try this 
/my_new_pi/?isa=system&ip_address=10.0.1.2&port=3456

/my_new_pi/gpio_1/?isa=gpio&pin=2&dir=output&value=1




Add to this some audio/video inputs and outputs and the Thing starts to have more interesting  personalities.

I have been working on this sort of data structure for many years now.
I also used to "NOT LIKE" C++.
But, looking at more recent releases of C++ there are some good structures that are worth looking at.

So, I am also using this to learn about C++.

Very basic code for now. Just about to start a Thing server (that runs on my_new_pi) for example.

It all starts with running a server.

If there are no things in the system it will create a simple thing called thing.

Clients can connect on the designated port

./things server port 

can be used to change the port number.

a few simple commands

list  - lists out all the known things

set - will set a new thing , a new kid or attributes etc...

set mykid/gpios/gpio_1?value=1&dir=out&pin=23

     will create 

thing
      mykid
        gpios
          gpio_1
            {value=1}
            {dir=out}
            {pin=23}

set /mybrother/gpios/gpio_1?value=1&dir=out&pin=23
set /mybrother/gpios/gpio_2?value=1&dir=out&pin=24

will create a new thing called mybrother with all the other stuff.
thing=>list
  mybrother: [none]
     gpios: [none]
        gpio_1: [none]
        {attr}   dir: [out]
        {attr}   pin: [23]
        {attr}   value: [1]
        gpio_2: [none]
        {attr}   dir: [out]
        {attr}   pin: [24]
        {attr}   value: [1]
  thing: [none]
     mykid: [none]
        gpios: [none]
           gpio_1: [none]
           {attr}   dir: [out]
           {attr}   pin: [23]
           {attr}   value: [1]


Enough of this playing, we can now move onto actions

Since , as we traverse the command string we "give"  the rest of the command to the next thing. Its time to introduce the 
isa server.

Lets try to get the isa's working first

this is all that worked

isa server /thing/mypi?ipaddress=10.0.2.3&port=2345


isa server /mypi?ipaddress=10.0.2.3&port=2345  no


But try to get this sequence working

isa client /thing/mypi?ipaddress=10.0.2.3&port=2345


set /thing/mypi/lets_create_some_gpios

to send set lets_create_some_gpios to mypi
   because its a client


Next debug

isa connection mypi2?ipaddress=10.0.2.3&port=2345 .. OK

set mypi2?ipaddress=10.0.2.3&port=2346  .. OK
set /mypi3?ipaddress=10.0.2.3&port=2346  .. OK

isa link /thing/mypi2?ipaddress=10.0.2.3&port=2346  busted .. now fixed
isa link /thing/mypi2?ipaddress=127.0.0.1&port=2346  busted .. now fixed


Also add to connections after the ISA

so make the 

isas

and

isas <isa>

commands work yes they do

isa link foo2 .... busted ... now OK
isa link /foo2 .... busted .. creates /foo2 .. now OK
set foo2       .... OK
set /foo2     .... OK
set /  .. busted now OK

NOw to connect to a server and send the command

Once we get that done we'll tidy it all up.



This works
isa link /thing/mypi2?ipaddress=127.0.0.1&port=2346  this works...

set mypi2/gpios/gpio_1?value=1

comes up with some goop...

 Set CMD [mypi2/gpios/gpio_1?value=1] 
{ }
next command is [gpios/gpio_1?value=1]
targ name [mypi2]
targ->isaThing [0x110fff0]
myname [mypi2] sending [set /gpios/gpio_1?value=1] to client 

thing=>

Well close to working we are cutting off characters.
the last two. Fixed it .. now we are starting to work.


We want to get to 

Thing("gpios/gpio_1")<<"set value=1"











Module loading
build a module with



libt2gpio.so: libt2gpio.c
	$(CC) -o $@ $< -shared -mfdpic






main code 
#include <dlfcn.h>

  char * fname = "libt2gpio.so"
  void * handle =  dlopen(fname, RTLD_NOW);
  if ( !handle) {
    fprintf( stderr, "open %s\n", dlerror());
    _exit(1);
  }
  dlerror();  /* clear any current error */
  t2gpio = dlsym(handle, "register");
  error = dlerror();
  if (error != NULL) {
    fprintf( stderr, "dlsym %s\n", dlerror());
    _exit(1);
  }
  int ret = t2gpio(this_t2)


library code

int register( T2 *t2)
{
    t2->addAction("scan", gpioScan);
    t2->addAction("get", gpioGet);
    t2->addAction("set", gpioSet);
    t2->addAction("show", gpioShow);
    t2->addKid("gpio_1?pin=1&dir=input");
    t2->addKid("gpio_2?pin=2&dir=input");
    t2->addKid("gpio_3?pin=3&dir=input");
    return 0;
} 


