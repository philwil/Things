Initial commants 1/28/2014
  Phil Wilshire

This is an attempt to create a method to find/describe/control things 
in an interconnected world.

A simple example is a set of gpios on a small system.

Take a url style of format

/my_new_pi/gpio_1/?value=1

This will set the value of gpio_1 on my_new_pi to 1 !

It would be nice to be able to set this up very simply.

try this 
/my_new_pi/?isa=system&ip_address=10.0.1.2&port=3456

/my_new_pi/gpio_1/?isa=gpio&pin=2&dir=output&value=1




Add to this some audio/video inputs and outputs and the Thing starts to have more interesting  personalities.

I have been working on this sort of data structure for many years now.
I also used to "NOT LIKE" C++.
But, looking at more recent releases of C++ there are some good structures that are worth looking at.

So, I am also using this to learn about C++.

Very basic code for now. Just about to start a Thing server (that runs on my_new_pi) for example.

It all starts with running a server.

If there are no things in the system it will create a simple thing called thing.

Clients can connect on the designated port

./things server port 

can be used to change the port number.

a few simple commands

list  - lists out all the known things

set - will set a new thing , a new kid or attributes etc...

set mykid/gpios/gpio_1?value=1&dir=out&pin=23

     will create 

thing
      mykid
        gpios
          gpio_1
            {value=1}
            {dir=out}
            {pin=23}

set /mybrother/gpios/gpio_1?value=1&dir=out&pin=23
set /mybrother/gpios/gpio_2?value=1&dir=out&pin=24

will create a new thing called mybrother with all the other stuff.
thing=>list
  mybrother: [none]
     gpios: [none]
        gpio_1: [none]
        {attr}   dir: [out]
        {attr}   pin: [23]
        {attr}   value: [1]
        gpio_2: [none]
        {attr}   dir: [out]
        {attr}   pin: [24]
        {attr}   value: [1]
  thing: [none]
     mykid: [none]
        gpios: [none]
           gpio_1: [none]
           {attr}   dir: [out]
           {attr}   pin: [23]
           {attr}   value: [1]


Enough of this playing, we can now move onto actions

Since , as we traverse the command string we "give"  the rest of the command to the next thing. Its time to introduce the 
isa server.

Lets try to get the isa's working first

this is all that worked

isa server /thing/mypi?ipaddress=10.0.2.3&port=2345


isa server /mypi?ipaddress=10.0.2.3&port=2345  no


But try to get this sequence working

isa client /thing/mypi?ipaddress=10.0.2.3&port=2345

set /thing/mypi/lets_create_some_gpios

to send set lets_create_some_gpios to mypi
   because its a client














